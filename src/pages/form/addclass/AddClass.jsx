// /**
//  * This component renders the Add Class page, which allows the user to add a new class to the system.
//  * It fetches the list of customers from the server and provides a form for the user to enter the details
//  * of the new class. Once the user submits the form, the new class is added to the system using the addClassApi
//  * function. If the class is added successfully, the user is redirected to the Classes page.
//  * @returns The Add Class page component.
//  */
import React, { useEffect, useRef, useState } from "react";
import Sidebar from "../../../components/sidebar/Sidebar";
import { addClassApi } from "../../../service/class.service";
import "./AddClass.scss";
import { useNavigate } from "react-router-dom";
import { fetchUsersApi } from "../../../service/auth.service";
// import toast from "react-hot-toast";

const AddClass = () => {
  // /**
  //  * A React functional component that renders a form for creating a new training session.
  //  * @returns None
  //  */
  const navigate = useNavigate();
  const [Title, setTitle] = useState("");
  const [Desc, setDesc] = useState("");
  const [Time, setTime] = useState("");
  const [date, setDate] = useState("");
  const [duration, setDuration] = useState("");

  const trainerID = useRef();
  const trainerName = useRef();
  const [Users, setUsers] = useState([]);

  //  * Handles the submission of a form to add a new class to the database.
  //  * @param {{Event}} e - The event object generated by the form submission.
  //  * @returns None
  //  */

  const fetchTrainers = async () => {
    const trainers = await fetchUsersApi();
    await setUsers(trainers.allUser);
    // console.log(Users);
  };

  const handleAddClass = async (e) => {
    e.preventDefault();
    let newDate = await new Date(date);
    let hour = await Time.split(":")[0];
    let minute = await Time.split(":")[1];
    await newDate.setHours(hour);
    await newDate.setMinutes(minute);
    try {
      const body = {
        classTitle: Title,
        description: Desc,
        trainerId: trainerID.current,
        trainerName: trainerName.current,
        date: newDate.toLocaleString(),
        duration: duration,
      };
      const response = await addClassApi(body);
      console.log(response);
      // toast.success("Class added Successfully");
    } catch (error) {
      // toast.error("Server response failed ");
      console.log(error);
    }
  };

  const handleChange = async (e) => {
    trainerID.current = await e.target.value;
    trainerName.current = await e.target.getElementsByClassName(
      e.target.value
    )[0].label;
    console.log(trainerID.current + " " + trainerName.current);
  };

  useEffect(() => {
    fetchTrainers();
  }, []);

  return (
    <div className="addclassform">
      <Sidebar mode="admin" />
      <div className="formContainer">
        <h3>Add Class Form</h3>
        <div className="auth-body">
          <form className="auth-form-validation" onSubmit={handleAddClass}>
            <div className="input-field">
              <label htmlFor="title" className="input-label">
                Title
              </label>
              <input
                type="text"
                className="input-control"
                id="title"
                placeholder="Title"
                autoComplete="off"
                required
                onChange={(e) => setTitle(e.target.value)}
              />
            </div>
            <div className="input-field">
              <label htmlFor="desc" className="input-label">
                Description
              </label>
              <input
                type="text"
                className="input-control"
                id="desc"
                placeholder="Class Description"
                autoComplete="off"
                required
                onChange={(e) => setDesc(e.target.value)}
              />
            </div>
            <div className="input-field">
              <label htmlFor="time" className="input-label">
                Time
              </label>
              <input
                type="time"
                className="input-control"
                id="time"
                autoComplete="off"
                required
                onChange={(e) => setTime(e.target.value)}
              />
            </div>
            <div className="input-field">
              <label htmlFor="time" className="input-label">
                Date
              </label>
              <input
                type="date"
                className="input-control"
                id="date"
                autoComplete="off"
                required
                onChange={(e) => setDate(e.target.value)}
              />
            </div>
            <div className="input-field">
              <label htmlFor="duration" className="input-label">
                Duration
              </label>
              <input
                type="text"
                className="input-control"
                id="duration"
                placeholder="Class Duration"
                autoComplete="off"
                required
                onChange={(e) => setDuration(e.target.value)}
              />
            </div>
            <div className="input-field">
              <label htmlFor="password" className="input-label">
                Trainer
              </label>

              <select
                name="trainer"
                id="trainer"
                className="input-control"
                onChange={handleChange}
              >
                {/* <option value="select">Select Trainer</option> */}
                {/* /**
                 * Maps through an array of users and returns an array of <option> elements for each user
                 * with a role of "trainer".
                 * @param {{Array}} Users - the array of user objects to map through
                 * @returns An array of <option> elements for each user with a role of "trainer".
                 */}
                <option
                  value="select-trainer"
                  className="select-trainer"
                  label="Select Trainer"
                ></option>
                {Users.map((user) => {
                  return (
                    user.role === "trainer" && (
                      <option
                        key={user._id}
                        value={user._id}
                        className={user._id}
                        label={user.name}
                      ></option>
                    )
                  );
                })}
              </select>
            </div>

            <button
              type="submit"
              className="btn-submit"
              onClick={handleAddClass}
            >
              Submit
            </button>
          </form>
        </div>
      </div>
    </div>
  );
};

export default AddClass;
